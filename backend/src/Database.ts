//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { UsersEntity } from './db/Users.entity';
import { SupportServicesEntity } from './db/SupportServices.entity';
import { HousingOptionsEntity } from './db/HousingOptions.entity';
import { ReportsEntity } from './db/Reports.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      UsersEntity,
      SupportServicesEntity,
      HousingOptionsEntity,
      ReportsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Users: [
        { name: 'name 1', age: 1, contact: 'contact 1', id: 37 },
        { name: 'name 2', age: 2, contact: 'contact 2', id: 48 },
        { name: 'name 3', age: 3, contact: 'contact 3', id: 96 },
        { name: 'name 4', age: 4, contact: 'contact 4', id: 96 },
        { name: 'name 5', age: 5, contact: 'contact 5', id: 8 },
      ],
      SupportServices: [
        {
          NGOs: 'NGOs 1',
          police: 'police 1',
          safety: false,
          antibully: true,
          id: 48,
        },
        {
          NGOs: 'NGOs 2',
          police: 'police 2',
          safety: true,
          antibully: true,
          id: 18,
        },
        {
          NGOs: 'NGOs 3',
          police: 'police 3',
          safety: false,
          antibully: false,
          id: 71,
        },
        {
          NGOs: 'NGOs 4',
          police: 'police 4',
          safety: true,
          antibully: true,
          id: 96,
        },
        {
          NGOs: 'NGOs 5',
          police: 'police 5',
          safety: false,
          antibully: true,
          id: 52,
        },
      ],
      HousingOptions: [
        {
          safe: false,
          affordable: false,
          filters: 'filters 1',
          rent: 0.28,
          id: 78,
        },
        {
          safe: false,
          affordable: false,
          filters: 'filters 2',
          rent: 0.05,
          id: 39,
        },
        {
          safe: true,
          affordable: true,
          filters: 'filters 3',
          rent: 0.91,
          id: 53,
        },
        {
          safe: true,
          affordable: true,
          filters: 'filters 4',
          rent: 0.2,
          id: 34,
        },
        {
          safe: false,
          affordable: false,
          filters: 'filters 5',
          rent: 0.98,
          id: 64,
        },
      ],
      Reports: [
        { fileAComplaint: 'fileAComplaint 1', report: 'report 1', id: 6 },
        { fileAComplaint: 'fileAComplaint 2', report: 'report 2', id: 94 },
        { fileAComplaint: 'fileAComplaint 3', report: 'report 3', id: 91 },
        { fileAComplaint: 'fileAComplaint 4', report: 'report 4', id: 28 },
        { fileAComplaint: 'fileAComplaint 5', report: 'report 5', id: 98 },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('UsersEntity', data.Users);
      await this.SeedResource('SupportServicesEntity', data.SupportServices);
      await this.SeedResource('HousingOptionsEntity', data.HousingOptions);
      await this.SeedResource('ReportsEntity', data.Reports);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
